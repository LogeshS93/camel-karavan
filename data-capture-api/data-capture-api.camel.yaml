- route:
    id: s3-new-files-via-sqs
    routeConfigurationId: yamlValidationSkip
    from:
      id: from-6235
      uri: aws2-sqs
      parameters:
        queueNameOrArn: >-
          arn:aws:sqs:eu-west-1:296079555281:mule-s3-trigger-new-queue-bronze-powerbot
        region: eu-west-1
        deleteAfterRead: true
        waitTimeSeconds: "20"
        accessKey: "{{app.accessKey}}"
        secretKey: "{{app.secretKey}}"
      steps:
        - unmarshal:
            id: unmarshal-8c4f
            json:
              id: json-9a34
        - filter:
            id: filter-fcb5
            expression:
              simple:
                id: simple-0fd6
                expression: >-
                  ${body[Records][0][s3][object][key]} starts with
                  'powerbot/landing/trades/'
            steps:
              - setHeaders:
                  id: setHeaders-79e4
                  headers:
                    - id: setHeader-2bd9
                      name: CamelAwsS3Key
                      expression:
                        simple:
                          id: simple-28e5
                          expression: ${body[Records][0][s3][object][key]}
                    - id: setHeader-adda
                      name: CamelAwsS3BucketName
                      expression:
                        simple:
                          id: simple-df46
                          expression: ${body[Records][0][s3][bucket][name]}
                    - id: setHeader-cb4b
                      name: data_source
                      expression:
                        constant:
                          id: constant-43a9
                          expression: mats
                    - id: setHeader-fcc6
                      name: file_path
                      expression:
                        simple:
                          id: simple-1a8f
                          expression: ${header.CamelAwsS3Key.replaceAll('/[^/]*$','')}
                    - id: setHeader-0cd2
                      name: file_name
                      expression:
                        simple:
                          id: simple-ed44
                          expression: ${header.CamelAwsS3Key.replaceAll('^.*/','')}
                    - id: setHeader-1c48
                      name: day
                      expression:
                        simple:
                          id: simple-035f
                          expression: >-
                            ${header.file_name.split('-')[4]}-${header.file_name.split('-')[5]}-${header.file_name.split('-')[6].replaceAll('\..*','')}
                    - id: setHeader-7800
                      name: market
                      expression:
                        simple:
                          id: simple-884e
                          expression: ${header.file_name.split('-')[1].toLowerCase()}
        - log:
            id: log-0f67
            message: >-
              NEW -->
              ${header.CamelAwsS3BucketName}/${header.file_path}/${header.file_name}
            loggingLevel: INFO
        - choice:
            id: choice-e308
            when:
              - id: when-3d77
                expression:
                  datasonnet:
                    id: datasonnet-ea2b
                    expression: >
                      local fileName = if cml.header('file_name') == null then
                      "" else cml.header('file_name');

                      ds.contains(cml.header('file_path'), 'powerbot') &&

                      !ds.matches(fileName,
                      @'(?i)^resultsoverview-(fcr|mfrr|afrr)-capacity-xlsx-.*\.xlsx$')
                steps:
                  - setHeader:
                      id: setHeader-7589
                      name: unwantedFile
                      expression:
                        constant:
                          id: constant-1dc3
                          expression: "true"
                  - log:
                      id: log-eb31
                      message: Not processing ${header.file_path}/${header.file_name}
                      loggingLevel: INFO
                  - validate:
                      id: validate-skip
                      expression:
                        simple:
                          id: simple-7221
                          expression: >-
                            ${header.file_name} != null && ${header.file_name}
                            != ''
            otherwise:
              id: otherwise-6fbe
              steps:
                - log:
                    id: log-7dda
                    message: Processing ${header.file_path}/${header.file_name}
                    loggingLevel: INFO
                - setHeader:
                    id: setHeader-89ea
                    name: unwantedFile
                    expression:
                      simple:
                        id: simple-e960
                        expression: "false"
                - validate:
                    id: validate-ok
                    expression:
                      simple:
                        id: simple-7221b
                        expression: >-
                          ${header.file_name} != null && ${header.file_name} !=
                          ''
        - choice:
            id: choice-9f89
            when:
              - id: when-2fa8
                expression:
                  simple:
                    id: simple-dee8
                    expression: ${header.unwantedFile} == 'false'
                steps:
                  - to:
                      id: to-2587
                      uri: aws2-s3
                      parameters:
                        bucketNameOrArn: eno-dm-bronze-dev
                        region: eu-west-1
                        operation: getObject
                        accessKey: "{{app.accessKey}}"
                        secretKey: "{{app.secretKey}}"
                  - process:
                      id: process-b65e
                      ref: xlsxToSheet001
                  - marshal:
                      id: marshal-b5d1
                      json:
                        id: json-97fc
                        prettyPrint: true
                        library: Jackson
                  - log:
                      id: log-51f2
                      message: XLSX sheet 001 tab is rendered
                      loggingLevel: INFO
                  - choice:
                      id: choice-5b02
                      when:
                        - id: when-fcr
                          expression:
                            simple:
                              id: simple-98e6
                              expression: ${header.market} == 'fcr'
                          steps:
                            - log:
                                id: log-1a32-fcr
                                message: >-
                                  Processing new regelleistung Prices for
                                  ${header.market}
                                loggingLevel: INFO
                            - setBody:
                                id: setBody-319a-fcr
                                expression:
                                  datasonnet:
                                    id: datasonnet-bd5b-fcr
                                    expression: >
                                      // application/json

                                      local buildDateTime(dateFrom, startTime) =
                                        ds.datetime
                                          .parse(dateFrom, "d/M/yy")
                                          .toTimeZone("Europe/Luxembourg")
                                          .plus("PT" + std.toString(std.parseInt(std.split(startTime, "_")[1])) + "H")
                                          .toISO();
                                      local buildValue(v) =
                                        if v == null then null
                                        else if v == "" then null
                                        else if std.isNumber(v) then v
                                        else if std.isString(v) && ds.matches(v, "^-?\\d+(\\.\\d+)?$")
                                          then ds.parseDouble(v)
                                          else v;
                                      local rows = if std.isArray(payload) then
                                      payload else [];

                                      local items = ds.map(rows, function(value,
                                      index) {
                                        name: "de_fcr_" + std.asciiLower(ds.strings.substringBefore(value.PRODUCTNAME, "_")) + "_settlement_capacity",
                                        ts: buildDateTime(value.DATE_FROM, value.PRODUCTNAME),
                                        value: buildValue(value["GERMANY_SETTLEMENTCAPACITY_PRICE_[EUR/MW]"])
                                      });

                                      local grouped = ds.groupBy(items,
                                      function(v, i) v.name);

                                      [
                                        {
                                          name: k,
                                          values: ds.map(grouped[k], function(v, i) { ts: v.ts, value: v.value })
                                        }
                                        for k in std.objectFields(grouped)
                                      ]
                                    outputMediaType: application/json
                                    resultType: java.lang.String
                            - to:
                                id: to-f479-fcr
                                uri: direct
                                parameters:
                                  name: update-odsPrices-subFlow
                        - id: when-afrr
                          expression:
                            simple:
                              id: simple-98e6-a
                              expression: ${header.market} == 'afrr'
                          steps:
                            - log:
                                id: log-1a32-afrr
                                message: >-
                                  Processing new regelleistung Prices for
                                  ${header.market}
                                loggingLevel: INFO
                            - setBody:
                                id: setBody-319a-afrr
                                expression:
                                  datasonnet:
                                    id: datasonnet-bd5b-afrr
                                    expression: >
                                      // application/json

                                      local buildDateTime(dateFrom, startTime) =
                                        ds.datetime
                                          .parse(dateFrom, "d/M/yy")
                                          .toTimeZone("Europe/Luxembourg")
                                          .plus("PT" + std.toString(std.parseInt(std.split(startTime, "_")[1])) + "H")
                                          .toISO();
                                      local buildValue(v) =
                                        if v == null then null
                                        else if v == "" then null
                                        else if std.isNumber(v) then v
                                        else if std.isString(v) && ds.matches(v, "^-?\\d+(\\.\\d+)?$")
                                          then ds.parseDouble(v)
                                          else v;
                                      local rows = if std.isArray(payload) then
                                      payload else [];

                                      local items = ds.map(rows, function(value,
                                      index) {
                                        name: "de_afrr_" + std.asciiLower(ds.strings.substringBefore(value.PRODUCT, "_")) + "_marginal_capacity",
                                        ts: buildDateTime(value.DATE_FROM, value.PRODUCT),
                                        value: buildValue(value["GERMANY_MARGINAL_CAPACITY_PRICE_[(EUR/MW)/h]"])
                                      });

                                      local grouped = ds.groupBy(items,
                                      function(v, i) v.name);

                                      [
                                        {
                                          name: k,
                                          values: ds.map(grouped[k], function(v, i) { ts: v.ts, value: v.value })
                                        }
                                        for k in std.objectFields(grouped)
                                      ]
                                    outputMediaType: application/json
                                    resultType: java.lang.String
                            - to:
                                id: to-f479-afrr
                                uri: direct
                                parameters:
                                  name: update-odsPrices-subFlow
                        - id: when-mfrr
                          expression:
                            simple:
                              id: simple-98e6-m
                              expression: ${header.market} == 'mfrr'
                          steps:
                            - log:
                                id: log-1a32-mfrr
                                message: >-
                                  Processing new regelleistung Prices for
                                  ${header.market}
                                loggingLevel: INFO
                            - setBody:
                                id: setBody-319a-mfrr
                                expression:
                                  datasonnet:
                                    id: datasonnet-bd5b-mfrr
                                    expression: >
                                      // application/json

                                      local buildDateTime(dateFrom, startTime) =
                                        ds.datetime
                                          .parse(dateFrom, "d/M/yy")
                                          .toTimeZone("Europe/Luxembourg")
                                          .plus("PT" + std.toString(std.parseInt(std.split(startTime, "_")[1])) + "H")
                                          .toISO();
                                      local buildValue(v) =
                                        if v == null then null
                                        else if v == "" then null
                                        else if std.isNumber(v) then v
                                        else if std.isString(v) && ds.matches(v, "^-?\\d+(\\.\\d+)?$")
                                          then ds.parseDouble(v)
                                          else v;
                                      local rows = if std.isArray(payload) then
                                      payload else [];

                                      local items = ds.map(rows, function(value,
                                      index) {
                                        name: "de_mfrr_" + std.asciiLower(ds.strings.substringBefore(value.PRODUCT, "_")) + "_marginal_capacity",
                                        ts: buildDateTime(value.DATE_FROM, value.PRODUCT),
                                        value: buildValue(value["GERMANY_MARGINAL_CAPACITY_PRICE_[(EUR/MW)/h]"])
                                      });

                                      local grouped = ds.groupBy(items,
                                      function(v, i) v.name);

                                      [
                                        {
                                          name: k,
                                          values: ds.map(grouped[k], function(v, i) { ts: v.ts, value: v.value })
                                        }
                                        for k in std.objectFields(grouped)
                                      ]
                                    outputMediaType: application/json
                                    resultType: java.lang.String
                            - to:
                                id: to-f479-mfrr
                                uri: direct
                                parameters:
                                  name: update-odsPrices-subFlow
                      otherwise:
                        id: otherwise-6b95
                        steps:
                          - log:
                              id: log-f298
                              message: Invalid market type ${header.market}
                              loggingLevel: DEBUG
            otherwise:
              id: otherwise-e719
              steps:
                - log:
                    id: log-a47a
                    message: Invalid/Unwanted file
                - stop:
                    id: stop-8b82
- route:
    id: update-odsPrices-subFlow
    from:
      id: from-012a
      uri: direct
      parameters:
        name: update-odsPrices-subFlow
      steps:
        - log:
            id: log-cf22
            message: ODS update (per series) -> ${body} points
            loggingLevel: INFO
        - split:
            id: split-db67
            expression:
              simple:
                id: simple-e315
                expression: ${body}
            steps:
              - to:
                  id: to-a480
                  uri: kamelet:postgresql-sink
                  parameters:
                    serverName: ods.cgehnoqtvxx4.eu-west-1.rds.amazonaws.com
                    username: mule-data-capture
                    password: "{{app.pgdbPwd}}"
                    databaseName: price.daily_data
                    query: >-
                      INSERT INTO price.daily_data (id, day, values) VALUES
                      (:#name, :#day, CAST(:#values AS jsonb)) ON CONFLICT (id,
                      day) DO UPDATE SET values = EXCLUDED.values;
- routeConfiguration:
    id: yamlValidationSkip
    onException:
      - onException:
          id: onException-595d
          exception:
            - org.apache.camel.ValidationException
          redeliveryPolicy:
            id: redeliveryPolicy-e4bd
            maximumRedeliveries: "0"
          handled:
            constant:
              id: constant-d1a9
              expression: "true"
          steps:
            - setBody:
                id: setBody-e02e
                expression:
                  simple:
                    id: simple-39f9
                    expression: >-
                      Skipping the event as it is a folder update/delete ->
                      ${header.file_path}/${header.file_name}
            - log:
                id: log-40d1
                message: ${body}
                loggingLevel: INFO
            - stop:
                id: stop-dee4
